// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/argo-client/client.go

// Package mock_argowf is a generated GoMock package.
package mock_argowf

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	argowf "github.com/openinfradev/tks-api/pkg/argo-client"
)

// MockArgoClient is a mock of ArgoClient interface.
type MockArgoClient struct {
	ctrl     *gomock.Controller
	recorder *MockArgoClientMockRecorder
}

// MockArgoClientMockRecorder is the mock recorder for MockArgoClient.
type MockArgoClientMockRecorder struct {
	mock *MockArgoClient
}

// NewMockArgoClient creates a new mock instance.
func NewMockArgoClient(ctrl *gomock.Controller) *MockArgoClient {
	mock := &MockArgoClient{ctrl: ctrl}
	mock.recorder = &MockArgoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgoClient) EXPECT() *MockArgoClientMockRecorder {
	return m.recorder
}

// GetWorkflow mocks base method.
func (m *MockArgoClient) GetWorkflow(ctx context.Context, namespace, workflowName string) (*argowf.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", ctx, namespace, workflowName)
	ret0, _ := ret[0].(*argowf.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow.
func (mr *MockArgoClientMockRecorder) GetWorkflow(ctx, namespace, workflowName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockArgoClient)(nil).GetWorkflow), ctx, namespace, workflowName)
}

// GetWorkflowLog mocks base method.
func (m *MockArgoClient) GetWorkflowLog(ctx context.Context, namespace, container, workflowName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowLog", ctx, namespace, container, workflowName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowLog indicates an expected call of GetWorkflowLog.
func (mr *MockArgoClientMockRecorder) GetWorkflowLog(ctx, namespace, container, workflowName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowLog", reflect.TypeOf((*MockArgoClient)(nil).GetWorkflowLog), ctx, namespace, container, workflowName)
}

// GetWorkflowTemplates mocks base method.
func (m *MockArgoClient) GetWorkflowTemplates(ctx context.Context, namespace string) (*argowf.GetWorkflowTemplatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowTemplates", ctx, namespace)
	ret0, _ := ret[0].(*argowf.GetWorkflowTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowTemplates indicates an expected call of GetWorkflowTemplates.
func (mr *MockArgoClientMockRecorder) GetWorkflowTemplates(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowTemplates", reflect.TypeOf((*MockArgoClient)(nil).GetWorkflowTemplates), ctx, namespace)
}

// GetWorkflows mocks base method.
func (m *MockArgoClient) GetWorkflows(ctx context.Context, namespace string) (*argowf.GetWorkflowsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflows", ctx, namespace)
	ret0, _ := ret[0].(*argowf.GetWorkflowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflows indicates an expected call of GetWorkflows.
func (mr *MockArgoClientMockRecorder) GetWorkflows(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflows", reflect.TypeOf((*MockArgoClient)(nil).GetWorkflows), ctx, namespace)
}

// ResumeWorkflow mocks base method.
func (m *MockArgoClient) ResumeWorkflow(ctx context.Context, namespace, workflowName string) (*argowf.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeWorkflow", ctx, namespace, workflowName)
	ret0, _ := ret[0].(*argowf.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeWorkflow indicates an expected call of ResumeWorkflow.
func (mr *MockArgoClientMockRecorder) ResumeWorkflow(ctx, namespace, workflowName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeWorkflow", reflect.TypeOf((*MockArgoClient)(nil).ResumeWorkflow), ctx, namespace, workflowName)
}

// SumbitWorkflowFromWftpl mocks base method.
func (m *MockArgoClient) SumbitWorkflowFromWftpl(ctx context.Context, wftplName string, opts argowf.SubmitOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumbitWorkflowFromWftpl", ctx, wftplName, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumbitWorkflowFromWftpl indicates an expected call of SumbitWorkflowFromWftpl.
func (mr *MockArgoClientMockRecorder) SumbitWorkflowFromWftpl(ctx, wftplName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumbitWorkflowFromWftpl", reflect.TypeOf((*MockArgoClient)(nil).SumbitWorkflowFromWftpl), ctx, wftplName, opts)
}
